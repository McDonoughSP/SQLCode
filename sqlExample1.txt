/////Sample database without primary/foreign keys
-CREATE TABLE users(_id INTEGER UNIQUE, name TEXT NOT NULL, );
	INSERT INTO users VALUES(1,'sean');
	INSERT INTO users VALUES(2,'fionn');
	INSERT INTO users VALUES(3,'lacey');
-CREATE TABLE phone(_id INTEGER UNIQUE, phone_number TEXT NOT NULL UNIQUE);
	INSERT INTO phone VALUES(1,'123-4567');
	INSERT INTO phone VALUES(2,'765-4321');
-CREATE TABLE user_phone(user_id INTEGER, phone_id INTEGER);
	INSERT INTO user_phone VALUES(1,2);
	INSERT INTO user_phone VALUES(2,1);
-CREATE VIEW user_phone_number AS SELECT users.name, phone.phone_number
 FROM user_phone INNER JOIN users ON user_phone.user_id= 
 users._id INNER JOIN phone ON user_phone.phone_id = phone._id;
-SELECT * FROM user_phone_number;
	sean|7654-321
	fionn|123-4567


////sample table naming two constraints to check the age and name fields
-CREATE TABLE test1(name TEXT NOT NULL, age INTEGER NOT NULL,
	CONSTRAINT CHK_age CHECK (age>=18),CONSTRAINT CHK_name
	CHECK (name='sean' OR name='fionn' OR name='lacey'));


/////Sample database using views, primary and foreign keys, and check constraints. 
PRAGMA FOREIGN KEYS = ON;

CREATE TABLE IF NOT EXISTS employees (
	_id INTEGER PRIMARY KEY,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	middle_initial TEXT,
	phone_number TEXT NOT NULL,
	email TEXT,
	department_id INTEGER,

	CHECK(length(first_name) <= 30 AND
	      length(last_name) <= 30 AND
	      length(middle_initial) <= 1 AND
	      length(phone_number) = 10 AND
	      length(email) <= 60),
	FOREIGN KEY(department_id) REFERENCES 
		    departments(_id)
);

CREATE TABLE IF NOT EXISTS departments(
	_id INTEGER PRIMARY KEY
	name TEXT NOT NULL,
);

CREATE TABLE IF NOT EXISTS products (
	_id INTEGER PRIMARY KEY
	name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS orders (
	_id INTEGER PRIMARY KEY,
	order_date DATE NOT NULL,
	quantity INTEGER NOT NULL,
	product_id INTEGER,
	CHECK(quantity>=0),
	FOREIGN KEY (product_id) REFERENCES products(_id)
);

CREATE VIEW product_orders AS SELECT products.name, SUM(quantity) AS total_quantity FROM orders 
INNER JOIN products ON orders.product_id = products._id GROUP BY products.name;


